praw <- '../data/raw'
ppro <-  '../data/processed'
f <- list.files(praw, pattern = 'csv')
files <- list.files(ppro, pattern = 'csv')
summary <- read.csv(file.path(praw, 'TerraDatVersionSummary.csv')) %>%
select(PrimaryKey, starts_with('AH'), Latitude_NAD83:Longitude_NAD83)
lpi <- read.csv( file.path(praw, 'LPIRAW.csv') ) %>%
select(PrimaryKey, RecKey, PointLoc:SoilSurface) %>%
mutate(across(.cols = TopCanopy:SoilSurface, ~ na_if(.x, ""))) %>%
pivot_longer(TopCanopy:SoilSurface, values_to = 'SYMBOL_AIM', names_to = 'Intercept') %>%
drop_na(SYMBOL_AIM) %>%
filter(SYMBOL_AIM != 'None', str_length(SYMBOL_AIM) >= 4)
attributes <- read.csv(file.path(ppro, files[grep('Attribute.*Table-RCB', files)]) )
lpi_sub <-  left_join(lpi, attributes, by = 'SYMBOL_AIM', multiple = 'all') %>%
mutate(Intercept = factor(
Intercept, c('TopCanopy', paste0(rep('Lower', 4), 1:4), 'SoilSurface'))) %>%
mutate(FUNCTIONAL2 = if_else(FUNCTIONAL == 'NonNoxSubShrubCover', 'NonNoxShrubCover', FUNCTIONAL)) %>%
group_by(PrimaryKey, RecKey, PointNbr, FUNCTIONAL2) %>%
slice_max(order_by = Intercept,  n = 1, with_ties = F) %>%
ungroup()
all_hits <- lpi_sub %>%
group_by(PrimaryKey, SYMBOL_USDA) %>%
add_count(SYMBOL_USDA, name = 'NIntercepts') %>%
select(PrimaryKey, SYMBOL_USDA, NIntercepts, SYMBOL_AIM, Intercept, FUNCTIONAL) %>%
distinct(PrimaryKey, SYMBOL_USDA, .keep_all = T)
all_hits_sum <- all_hits %>%
ungroup() %>%
group_by(PrimaryKey, FUNCTIONAL) %>%
summarize(Fractional_Cover = sum(NIntercepts))
all_hits_w <- all_hits_sum %>%
mutate(FUNCTIONAL = str_trim(FUNCTIONAL)) %>%
pivot_wider(names_from = FUNCTIONAL, values_from = Fractional_Cover, values_fill = 0) %>%
mutate(NoxSubShrubCover = 0, NoxSucculentCover = 0, NoxTreeCover = 0)  %>%
mutate(across(where(is.numeric), ~ (./150)*100))
rm(all_hits, all_hits_sum, lpi_sub)
terradat_calc <- summary %>%
select(PrimaryKey, starts_with('AH')) %>%
pivot_longer(!PrimaryKey, names_to = 'Variable', values_to = 'Cover_TD') %>%
filter(Variable %in% c('AH_ForbCover', 'AH_GrassCover', 'AH_PerenGrassCover',
'AH_ShrubCover', 'AH_PerenForbCover', 'AH_NonNoxTreeCover',
'AH_PerenForbCover') ) %>%
mutate(Variable = str_remove(Variable, "AH_"),
Variable = str_remove(Variable, "Cover"),
Variable = str_remove(Variable, "NonNox"))
rm(summary)
agg <- read.csv(file.path(praw, f[grep('Func_', f)]) ) %>%
filter(!FUNCTIONAL_AGGREGATE %in% c('PerenForb', 'PerenGrass'))
lpi_agg <- left_join(lpi, attributes, by = 'SYMBOL_AIM', multiple = 'all') %>%
mutate(Intercept = factor(
Intercept, c('TopCanopy', paste0(rep('Lower', 4), 1:4), 'SoilSurface')),
FUNCTIONAL = str_trim(FUNCTIONAL)) %>%
left_join(., agg, by = 'FUNCTIONAL') %>%
group_by(PrimaryKey, RecKey, PointNbr, FUNCTIONAL_AGGREGATE) %>%
slice_max(order_by = Intercept,  n = 1, with_ties = F) %>%
ungroup()
all_hits_agg <- lpi_agg %>%
group_by(PrimaryKey, SYMBOL_USDA) %>%
add_count(SYMBOL_USDA, name = 'NIntercepts') %>%
select(PrimaryKey, SYMBOL_USDA, NIntercepts, SYMBOL_AIM, Intercept, FUNCTIONAL_AGGREGATE) %>%
distinct(PrimaryKey, SYMBOL_USDA, .keep_all = T)
all_hits_agg_sum <- all_hits_agg %>%
ungroup() %>%
group_by(PrimaryKey, FUNCTIONAL_AGGREGATE) %>%
summarize(Cover_HB = sum(NIntercepts)) %>%
rename(Variable = FUNCTIONAL_AGGREGATE) %>%
mutate(across(where(is.numeric), ~ (./150)*100))
compare_agg <- inner_join(all_hits_agg_sum, terradat_calc, by = c('PrimaryKey', 'Variable')) %>%
mutate(across(where(is.numeric), ~ round(.x, 1)))
#FIX <- compare_agg %>% filter(Cover_HB != Cover_TD) %>%
#  mutate(diff = abs(Cover_HB - Cover_TD))
off <- compare_agg %>%
rowwise %>%
filter(Cover_HB != Cover_TD) %>%
mutate(difference = abs(Cover_HB - Cover_TD))
pairs <- lapply(split(compare_agg, compare_agg$Variable), nrow) |>
data.frame()
all_cor <- lapply(split(compare_agg, compare_agg$Variable),
function(x) cor(x$Cover_HB, x$Cover_TD)) |>
data.frame()
mismatch_cor <- lapply(split(off, off$Variable),
function(x) cor(x$Cover_HB, x$Cover_TD)) |>
data.frame()
rm(agg, lpi_agg, all_hits_agg, all_hits_agg_sum)
rm(off, compare_agg, mismatch_cor, all_cor, pairs, terradat_calc)
native_esd_grps <- read.csv( file.path(praw, f[grep('native_esd_covers', f)]))
lpi_agg <- left_join(lpi, attributes, by = 'SYMBOL_AIM', multiple = 'all') %>%
mutate(Intercept = factor(
Intercept, c('TopCanopy', paste0(rep('Lower', 4), 1:4), 'SoilSurface')),
FUNCTIONAL = str_trim(FUNCTIONAL)) %>%
left_join(., native_esd_grps, by = 'FUNCTIONAL') %>%
group_by(PrimaryKey, RecKey, PointNbr, FUNCTIONAL_AGGREGATE) %>%
slice_max(order_by = Intercept,  n = 1, with_ties = F) %>%
ungroup()
all_hits_nat <- lpi_agg %>%
group_by(PrimaryKey, SYMBOL_USDA) %>%
add_count(SYMBOL_USDA, name = 'NIntercepts') %>%
select(PrimaryKey, SYMBOL_USDA, NIntercepts, SYMBOL_AIM, Intercept, FUNCTIONAL_AGGREGATE) %>%
distinct(PrimaryKey, SYMBOL_USDA, .keep_all = T)
all_hits_nat <- all_hits_nat %>%
ungroup() %>%
group_by(PrimaryKey, FUNCTIONAL_AGGREGATE) %>%
summarize(Cover_HB = sum(NIntercepts)) %>%
rename(Variable = FUNCTIONAL_AGGREGATE) %>%
mutate(across(where(is.numeric), ~ (./150)*100))
rm(attributes, native_esd_grps, lpi_agg, lpi)
all_hits_nat <- all_hits_nat %>%
drop_na(Variable) %>%
group_by(PrimaryKey) %>%
pivot_wider(names_from = 'Variable', values_from = 'Cover_HB', values_fill = 0) %>%
pivot_longer(!PrimaryKey, names_to = 'Variable', values_to = 'Cover_HB')
pts <- st_read(
'../../aimDB/data/raw/AIM_Sample_Design/AIM_Design_Stratification.shp',
quiet = T) %>%
st_transform(26913) %>%
st_buffer(55) %>%
select(PLOTID, STRATUM)
char <- read.csv(file.path(praw, f[grep('Characterization', f)] ) ) %>%
st_as_sf( coords = c('Longitude', 'Latitude'), crs = 4269) %>%
filter(str_detect(PrimaryKey, negate = T,
'Fuels|Bull-Draw|CO-NWD|_Tres_Rios|Grand_Junction|Gunnison|Moab|TRFO'),
str_detect(PlotID, '[A-Z]{2,3}-[0-9]{2,3}')) %>%
st_transform(26913) %>%
select(PrimaryKey)
esd_class <- read.csv( file.path(praw, f[grep('Tracking', f)]) ) %>%
filter(STATUS == 'SAMPLED') %>%
mutate(ECO.SITE = if_else(ECO.SITE.MATCHED == F, 'UNKNOWN', ECO.SITE)) %>%
select(PLOTID = PLOT.ID, ECO.SITE)
site_esd <- st_join(pts, char) %>%
drop_na(PrimaryKey) %>%
left_join(., esd_class, by = 'PLOTID') %>%
mutate(ECO.SITE = if_else(PLOTID == 'GR-035', 'R036XY114CO', ECO.SITE),
PLOTID = if_else(PLOTID == 'GR-035', 'GR-025', PLOTID))
rm(pts, char, esd_class)
benchmarks <- read.csv(file.path(praw, f[grep('Benchmark', f)])) %>%
select(-X, -RANGE)  %>%
mutate(SET = 'ESD')
esdM <- read.csv(file.path(praw, f[grep('modules', f)])) %>%
rbind(., data.frame(ESD = 'R036XY315UT',
module_name = 'PinyonJuniper',
module_number = 1))
# impute the value of lower benchmark for use with the ESG
bench_4for_besg <- benchmarks %>% # mean Estimate of ESD
filter(COVER_TYPE == 'Forb' & ESTIMATE == 'LOWER') %>%
summarize(mean = round(mean(COVER), 1)) %>%
as.numeric()
# repeat for ESG and combine
esg_lkp_tab <- read.csv(file.path(praw, f[grep('ESG-Lookup', f)]))
lkp_abb <- data.frame(
Climate =
c('Arid_Warm', 'Semiarid_Cool',  'Semiarid_warm', 'No_Climate_Group'),
Abbrev = c('AW', 'SAC', 'SAW', "")
)
esg_cover <- read.csv(file.path(praw, f[grep('EcologicalSiteGroup', f)])) %>%
rowwise() %>%
mutate(Grass = sum(C3_Perennial_Grass, C4_Perennial_Grass)) %>%
select(Climate, SoilGeomorphicUnits, Grass, Forb, Shrub, Tree) %>%
left_join(., lkp_abb) %>%
unite('ESG', c('Abbrev', 'SoilGeomorphicUnits'), sep = '-') %>%
select(-Climate) %>%
mutate(ESG = str_remove(ESG, '^-'),
ESG = str_replace(ESG, 'AW-Sandy_Bottoms', 'AW-Bottoms'),
ESG = str_replace(ESG, 'SAC-Saline_Sandy_Loamy_Finer_Uplands',
'SAC-Finer_Uplands')
) %>%
left_join(., esg_lkp_tab, multiple = 'all')
# make long to bind together, combine both esd names and esg names
benchmarks_known_esd <- esg_cover %>%
pivot_longer(cols = Grass:Tree, values_to = 'COVER', names_to = 'COVER_TYPE')
benchmarks <- benchmarks_known_esd %>%
select(-ECO.SITE) %>%
rename(ECO.SITE = ESG) %>%
bind_rows(., benchmarks_known_esd) %>%
select(-ESG) %>%
mutate(ESTIMATE = 'LOWER', COVER_RANGE = 'ORIGINAL',
MEAN = as.numeric(COVER), SET = 'ESG')  %>%
filter(!ECO.SITE %in% benchmarks$ECO.SITE) %>%
bind_rows(., benchmarks) %>%
as.data.frame()
benchmarks <- drop_na(benchmarks, ECO.SITE) %>% distinct()
# add in imputed forb value
esg_others <- benchmarks %>% filter(SET == 'ESG' & COVER_TYPE != 'Forb')
esd <- benchmarks %>%  filter(SET == 'ESD')
benchmarks <- benchmarks %>%
filter(SET == 'ESG', COVER_TYPE == 'Forb') %>%
mutate(COVER = bench_4for_besg)  %>%
bind_rows(., esg_others, esd)
rm(lkp_abb, esg_lkp_tab, benchmarks_known_esd, esg_others, esd, bench_4for_besg)
esg_plots <- read.csv(file.path(praw, f[grep('ESG_unverified_plots', f)]) ) %>%
mutate(ESG = str_replace(ESG, '_-_', '-')) %>%
rename(PLOTID = 'PLOT.ID')
# we have to detect plots which were not correlated to an ESD, and need to
# use the ESG as a stand in for ecological site
site_esg <- site_esd %>%
filter(ECO.SITE == 'UNKNOWN') %>%
select(-ECO.SITE) %>%
left_join(., esg_plots, by = 'PLOTID') %>%
rename(ECO.SITE = ESG)
site_esd <- site_esd %>%
filter(!PLOTID %in% site_esg$PLOTID) %>%
bind_rows(site_esg, .) %>%
st_drop_geometry()
# this inner join is killing me, missing many GR- why ? leading 0's  ?
all_hits_nat <- full_join(site_esd, all_hits_nat, by = 'PrimaryKey', multiple = "all") %>%
mutate(ECO.SITE = str_replace(ECO.SITE, 'SAC-Loamy_Uplands', 'SAC-Finer_Uplands'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Sandy_Uplands_and_Loamy_Uplands',
'SAW_Sandy_&_Loamy'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Shallow_and_Deep_Rocky',
'SAW_Shallow_&_Rocky'),
ECO.SITE = str_replace(ECO.SITE, 'AW-Shallow',  'AW-Very_Shallow'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Bottoms_and_Bottoms',
'SAW-Bottoms_&_Bottoms')
) %>%
drop_na()
benchmarks <- benchmarks %>%
mutate(ECO.SITE = str_replace(ECO.SITE, 'SAW-Sandy_Uplands_and_Loamy_Uplands',
'SAW_Sandy_&_Loamy'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Shallow_and_Deep_Rocky',
'SAW_Shallow_&_Rocky'),
ECO.SITE = str_replace(ECO.SITE, 'AW-Saline_Bottoms_and_Bottoms',
'AW_Bottoms'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Bottoms_and_Bottoms',
'SAW-Bottoms_&_Bottoms')
) %>%
distinct(.keep_all = T)
rm(site_esd, site_esg, esg_plots)
wghts <- read.csv( file.path(praw, f[grep('Weights', f)])) %>%
select(WghtPerPlot, STRATUM = Stratum, AoInference = Area)
all_hits_nat <- read.csv(file.path(praw, f[grep('Interence', f)])) %>%
select(PLOTID = Plot.ID, AoInference, xcoord, ycoord) %>%
right_join(., all_hits_nat, multiple = 'all') %>%
rowwise() %>%
mutate(STRATUM = str_remove(str_extract(PLOTID, '^.*-'), '-')) %>%
left_join(., wghts, by = c('STRATUM','AoInference'), multiple = "all")  %>%
mutate(AoInference = str_replace(AoInference, '-NM', '-NCA')) %>%
rename(COVER_TYPE = Variable) %>%
st_as_sf(coords = c('xcoord', 'ycoord'), crs = 4269) %>%
drop_na() %>%
mutate(ECO.SITE = str_replace(ECO.SITE, 'SAW-Outcrops', 'Outcrops'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Bottoms', 'SAW-Bottoms_&_Bottoms'))
# also add the MEAN for plotting purposes
#all_hits_nat <- benchmarks %>%
#  select(ECO.SITE, COVER_TYPE, MEAN) %>%
#  right_join(., all_hits_nat, by = c('ECO.SITE', 'COVER_TYPE')) %>%
#  st_as_sf(coords = c('xcoord', 'ycoord'), crs = 4269)
rm(wghts)
lc_lkp <- read.csv(file.path(praw, f[grep('landcover', f)]) )
r <- terra::rast('../../plot_post_stratification/data/processed/PredictedVegClass.tif')
pts <- all_hits_nat %>%
distinct(PLOTID, .keep_all = T) %>%
select(PLOTID) %>%
terra::vect() %>%
terra::project(terra::crs(r))
reclass <- terra::extract(r, pts, method = 'simple', bind = T) %>%
as.data.frame() %>%
mutate(lyr1 = case_when(
PLOTID %in% c('PJ-143', 'PJ-153') ~ 4,
PLOTID %in% c('AS-002', 'AS-004') ~ 3,
PLOTID == 'MC-068' ~ 2,
TRUE ~ lyr1))
all_hits_nat <- left_join(all_hits_nat, reclass, by = 'PLOTID', multiple = "all") %>%
left_join(., lc_lkp, by = c('lyr1' = 'layer'), multiple = "all") %>%
select(-lyr1) %>%
relocate(stratum, .before = geometry) %>%
st_as_sf() %>%
mutate(stratum = str_trim(stratum))
rm(r, pts, reclass, lc_lkp)
# need to add MEAN to everything to rearrange axis on plots
all_hits_forb <- all_hits_nat %>%
filter(COVER_TYPE == 'Forb')
bmf <- benchmarks %>%
distinct() %>%
filter(COVER_TYPE == 'Forb', ESTIMATE == 'LOWER') %>%
rename('TARGET' = COVER)
all_hits_forb <- left_join(all_hits_forb, bmf, by = c('ECO.SITE', 'COVER_TYPE'), multiple = "all") %>%
mutate(Meeting = if_else(Cover_HB >= TARGET, T, F))
forb <- spsurvey::cat_analysis(
dframe = all_hits_forb, siteID = 'PLOTID', vars = 'Meeting',
subpops = 'AoInference',  weight = 'WghtPerPlot', vartype = 'Local', conf = 80)
ahf <- select(all_hits_forb,
PLOTID, AoInference, Meeting, COVER_TYPE, ECO.SITE, WghtPerPlot )
rm(bmf)
all_hits_shrub <- all_hits_nat %>%
filter(COVER_TYPE == 'Shrub')
# restart here need to SPLIT THESE OUT INTO TWO DIFFERENT DATA FRAMES. WE NEED THE LOWER
# FOR THE SALT DESERT SITES !!!!!!!!!!!!!!!!!! UPPER FOR THE OTHER SITES!!!!!!!!
bm_sd <- benchmarks %>%
filter(COVER_TYPE == 'Shrub', ESTIMATE == 'LOWER')
salt_des_shrub <- all_hits_shrub %>%
filter(stratum ==  'Salt_Desert') %>%
left_join(., bm_sd, by = c('ECO.SITE', 'COVER_TYPE'), multiple = "all") %>%
mutate(Meeting = if_else(stratum ==  'Salt_Desert' & Cover_HB >= COVER,  T, F))
bmf <- benchmarks %>%
filter(COVER_TYPE == 'Shrub', ESTIMATE == 'UPPER' | SET == 'ESG')
all_hits_shrub <- all_hits_shrub %>%
filter((stratum != "Salt_Desert")
%>% replace_na(TRUE)) %>%
left_join(., bmf, by = c('ECO.SITE', 'COVER_TYPE'), multiple = "all") %>%
mutate(Meeting = if_else(Cover_HB <= COVER,  T, F)) %>%
bind_rows(., salt_des_shrub) %>%
rename('TARGET' = COVER)
shrub <- spsurvey::cat_analysis(
dframe = all_hits_shrub, siteID = 'PLOTID', vars = 'Meeting',
subpops = 'AoInference',  weight = 'WghtPerPlot', vartype = 'Local', conf = 80)
ahs <- select(all_hits_shrub,
PLOTID, AoInference, Meeting, COVER_TYPE, ECO.SITE, WghtPerPlot)
rm(bmf, salt_des_shrub, bm_sd)
all_hits_tree <- all_hits_nat %>%
filter(COVER_TYPE == 'Tree')
bmf <- benchmarks %>%
filter(COVER_TYPE == 'Tree', ESTIMATE == 'UPPER' | SET == 'ESG') %>%
rename('TARGET' = COVER)
all_hits_tree <- left_join(all_hits_tree, bmf, by = c('ECO.SITE', 'COVER_TYPE'),
multiple = "all") %>%
mutate(Meeting = if_else(Cover_HB <= TARGET, T, F))
tree <- spsurvey::cat_analysis(
dframe = all_hits_tree, siteID = 'PLOTID', vars = 'Meeting',
subpops = 'AoInference',  weight = 'WghtPerPlot', vartype = 'Local', conf = 80)
aht <- select(all_hits_tree,
PLOTID, AoInference, Meeting, COVER_TYPE, ECO.SITE, WghtPerPlot)
rm(bmf)
all_hits_grass <- all_hits_nat %>%
filter(COVER_TYPE == 'Grass')
bmf <- benchmarks %>%
filter(COVER_TYPE == 'Grass', ESTIMATE == 'LOWER' | SET == 'ESG') %>%
rename('TARGET' = COVER)
all_hits_grass <- left_join(all_hits_grass, bmf, by = c('ECO.SITE', 'COVER_TYPE'),
multiple = "all") %>%
mutate(Meeting = if_else(Cover_HB >= TARGET, T, F))
grass <- spsurvey::cat_analysis(
dframe = all_hits_grass, siteID = 'PLOTID', vars = 'Meeting',
subpops = 'AoInference',  weight = 'WghtPerPlot', vartype = 'Local', conf = 80)
ahg <- select(all_hits_grass,
PLOTID, AoInference, Meeting, COVER_TYPE, ECO.SITE, WghtPerPlot)
rm(bmf)
rm(all_hits_grass, all_hits_forb, all_hits_shrub, all_hits_nat, all_hits_tree,
all_hits_w, esdM, esg_cover, benchmarks)
achieving <- bind_rows(ahf, ahs, aht, ahg) %>%
group_by(ECO.SITE) %>%
add_count(name = 'SAMPLE') %>%
mutate(SAMPLE = SAMPLE/4) %>%
rename('LIFEFORM' =  COVER_TYPE) %>%
mutate(ACHIEVING = if_else(Meeting == T, 'Y', 'N'))
rm(ahf, ahs, aht, ahg)
yn <- achieving
yn <- yn %>%
add_count(ACHIEVING, name = 'dummy')  %>%
mutate(dummy = jitter( (dummy/4) / SAMPLE )) %>%
arrange(-dummy)
yn_levls <- yn %>%
distinct(ECO.SITE) %>%
pull(ECO.SITE)
yn <- yn %>%
group_by(ECO.SITE) %>%
mutate(ECO.SITE = factor(ECO.SITE, levels = yn_levls),
PROP_ACHIEVE = sum(if_else(ACHIEVING == 'Y', 1, 0))/n())
sfm <- c('Y' = 'Yes', 'N' = 'No')
sfm_values = c('Y' = '#1FE032', 'N' = '#E0321F')
new_labels <- c('FORB' = 'Forb', 'GRASS' =  'Grass', 'SHRUB' =  'Shrub', 'TREE' =  'Tree')
p1 <- ggplot(yn, aes(y = fct_reorder(ECO.SITE, PROP_ACHIEVE), fill = ACHIEVING)) +
facet_wrap(~LIFEFORM, nrow = 1) + #,
#  labeller = as_labeller(new_labels)) +
geom_bar(position = "fill", width = 1) +
scale_fill_manual('Achieving', labels = sfm,
values = sfm_values) +
theme_bw() +
theme(legend.position= 'none',
axis.text.y = element_text(color = "grey20", size = 5),
panel.spacing = unit(0, "lines"),
plot.margin=grid::unit(c(0,0,0,0), "lines"),
panel.border = element_rect(fill = NA, colour = NA)) +
labs(x = NULL, y = NULL) +
scale_x_continuous(labels = c(0, 0.50, 1), breaks = c(0, 0.5, 1)) +
guides(fill = guide_legend(reverse = TRUE))
yn$title <- 'Number Plots'
p2 <- ggplot(yn, aes(y = fct_reorder(ECO.SITE, PROP_ACHIEVE), x = 1, fill = SAMPLE)) +
facet_grid(. ~ title) +
geom_tile() +
scale_fill_continuous('n', low="#8ecae6", high="#321FE0") +
scale_x_continuous(labels = 0.5, breaks = 0.5) +
labs(x = NULL, y = NULL) +
theme_bw() +
theme(
legend.position="none",
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 8),
plot.margin = grid::unit(c(0,0,0,-0.2), "lines"),
axis.text.x = element_text(color = 'white'), #remove x axis labels
axis.text.y = element_blank(),  #remove y axis labels
axis.ticks.y = element_blank(),  #remove y axis ticks
panel.border = element_rect(fill = NA, colour = NA))
l2 <- cowplot::get_legend ( ggplot(yn, aes(y = ECO.SITE, x = 1, fill = SAMPLE)) +
facet_grid(. ~ title) +
geom_tile() +
scale_fill_continuous('n', low="#8ecae6", high="#321FE0") +
theme(legend.position="bottom",
legend.text = element_text(size = 8)))
combineLegend <- plot_grid(l1, l2, nrow = 1, rel_widths = c(0.5, 0.5),
rel_heights = c(0.6, 0.4))
plots <- plot_grid(p1, p2, rel_widths = c(0.81, 0.19))
combineLegend <- plot_grid(l1, l2, nrow = 1, rel_widths = c(0.5, 0.5),
rel_heights = c(0.6, 0.4))
l1 <- cowplot::get_legend( ggplot(yn, aes(y = ECO.SITE, fill = ACHIEVING)) +
geom_bar(position = "fill", width = 1) +
scale_fill_manual('Achieving', labels = sfm,
values = sfm_values) +
theme(
legend.position= 'bottom',
axis.text.y = element_text(color = "grey20", size = 3),
legend.text=element_text(size = 8),
panel.spacing = unit(0, "lines"),
plot.margin=grid::unit(c(0,0,0,0), "lines"),
panel.border = element_rect(fill = NA, colour = NA)) +
guides(fill = guide_legend(reverse = TRUE))
)
combineLegend <- plot_grid(l1, l2, nrow = 1, rel_widths = c(0.5, 0.5),
rel_heights = c(0.6, 0.4))
plots <- plot_grid(p1, p2, rel_widths = c(0.81, 0.19))
plotLeg <- plot_grid(plots, combineLegend, rel_heights = c(0.95, 0.05), nrow = 2)
title <- ggdraw() +
draw_label("Proportion of Plots Meeting Benchmark", size = 12)
f_plot <- cowplot::plot_grid(title, plotLeg, ncol = 1, rel_heights = c(0.1, 1))
f_plot
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(0.95, 0.03, 0.05), nrow = 2)
title <- ggdraw() +
draw_label("Proportion of Plots Meeting Benchmark", size = 12)
f_plot <- cowplot::plot_grid(title, plotLeg, ncol = 1, rel_heights = c(0.1, 1))
save_plot('../plots/graphics/PropPlotsMeetBenchmarks.png', f_plot)
l2 <- cowplot::get_legend ( ggplot(yn, aes(y = ECO.SITE, x = 1, fill = SAMPLE)) +
facet_grid(. ~ title) +
geom_tile() +
scale_fill_continuous('n', low="#8ecae6", high="#321FE0") +
theme(legend.position="bottom",
legend.text = element_text(size = 8)))
combineLegend <- plot_grid(l1, l2, nrow = 1, rel_widths = c(0.5, 0.5),
rel_heights = c(0.6, 0.4))
plots <- plot_grid(p1, p2, rel_widths = c(0.81, 0.19))
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(0.95, 0.03, 0.05), nrow = 2)
title <- ggdraw() +
draw_label("Proportion of Plots Meeting Benchmark", size = 12)
f_plot <- cowplot::plot_grid(title, plotLeg, ncol = 1, rel_heights = c(0.1, 1))
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(0.92, 0.03, 0.05), nrow = 2)
plotLeg
plots
plotLeg <- plot_grid(plots, combineLegend, rel_heights = c(0.92, 0.05), nrow = 2)
plotLeg
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(0.92, 0.05 0.05), nrow = 2, ncol = 1)
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(0.92, 0.05, 0.05), nrow = 2, ncol = 1)
plotLeg
title <- ggdraw() +
draw_label("Proportion of Plots Meeting Benchmark", size = 12)
f_plot <- cowplot::plot_grid(title, plotLeg, ncol = 1, rel_heights = c(0.1, 1))
f_plot
plotLeg
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(0.92, 0.01, 0.05), nrow = 2, ncol = 1)
plotLeg
title <- ggdraw() +
draw_label("Proportion of Plots Meeting Benchmark", size = 12)
f_plot <- cowplot::plot_grid(title, plotLeg, ncol = 1, rel_heights = c(0.1, 1))
save_plot('../plots/graphics/PropPlotsMeetBenchmarks.png', f_plot)
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(1, 0.01, 0.05), nrow = 2, ncol = 1)
plotLeg
plotLeg <- plot_grid(plots, combineLegend, rel_heights = c(1,0.05), nrow = 2, ncol = 1)
plotLeg
plotLeg
plotLeg <- plot_grid(plots, NULL combineLegend, rel_heights = c(1, 0.0001, 0.05), nrow = 2, ncol = 1)
plotLeg
plotLeg <- plot_grid(plots, NULL combineLegend, rel_heights = c(1, 0.0001, 0.05), nrow = 2, ncol = 1)
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(1, 0.0001, 0.05), nrow = 2, ncol = 1)
plotLeg
title <- ggdraw() +
draw_label("Proportion of Plots Meeting Benchmark", size = 12)
f_plot <- cowplot::plot_grid(title, plotLeg, ncol = 1, rel_heights = c(0.1, 1))
save_plot('../plots/graphics/PropPlotsMeetBenchmarks.png', f_plot)
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(1, 0.0001, 0.05), nrow = 3, ncol = 1)
plotLeg
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(1, 0.01, 0.05), nrow = 3, ncol = 1)
plotLeg
title <- ggdraw() +
draw_label("Proportion of Plots Meeting Benchmark", size = 12)
f_plot <- cowplot::plot_grid(title, plotLeg, ncol = 1, rel_heights = c(0.1, 1))
save_plot('../plots/graphics/PropPlotsMeetBenchmarks.png', f_plot)
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(1, 0.05, 0.05), nrow = 3, ncol = 1)
plotLeg
title <- ggdraw() +
draw_label("Proportion of Plots Meeting Benchmark", size = 12)
f_plot <- cowplot::plot_grid(title, plotLeg, ncol = 1, rel_heights = c(0.1, 1))
save_plot('../plots/graphics/PropPlotsMeetBenchmarks.png', f_plot)
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(1, 0.1, 0.05, 0.1), nrow = 4, ncol = 1)
plotLeg
title <- ggdraw() +
draw_label("Proportion of Plots Meeting Benchmark", size = 12)
f_plot <- cowplot::plot_grid(title, plotLeg, ncol = 1, rel_heights = c(0.1, 1))
save_plot('../plots/graphics/PropPlotsMeetBenchmarks.png', f_plot)
plotLeg <- plot_grid(plots, NULL, combineLegend, rel_heights = c(1, 0.1, 0.03, 0.1), nrow = 4, ncol = 1)
plotLeg
title <- ggdraw() +
draw_label("Proportion of Plots Meeting Benchmark", size = 12)
f_plot <- cowplot::plot_grid(title, plotLeg, ncol = 1, rel_heights = c(0.1, 1))
save_plot('../plots/graphics/PropPlotsMeetBenchmarks.png', f_plot)
plotLeg <- plot_grid(plots, NULL, combineLegend, NULL, rel_heights = c(1, 0.1, 0.03, 0.1), nrow = 4, ncol = 1)
plotLeg
title <- ggdraw() +
draw_label("Proportion of Plots Meeting Benchmark", size = 12)
f_plot <- cowplot::plot_grid(title, plotLeg, ncol = 1, rel_heights = c(0.1, 1))
save_plot('../plots/graphics/PropPlotsMeetBenchmarks.png', f_plot)
save_plot('../plots/graphics/PropPlotsMeetBenchmarks.png', f_plot)
plotLeg <- plot_grid(plots, NULL, combineLegend, NULL, rel_heights = c(1, 0.1, 0.01, 0.1), nrow = 4, ncol = 1)
plotLeg
title <- ggdraw() +
draw_label("Proportion of Plots Meeting Benchmark", size = 12)
f_plot <- cowplot::plot_grid(title, plotLeg, ncol = 1, rel_heights = c(0.1, 1))
save_plot('../plots/graphics/PropPlotsMeetBenchmarks.png', f_plot)
